#[allow(unused_variables,unused_mut,redundant_semicolons,unused_must_use,non_snake_case)]fn main(){let automataLength=110;
;
let mut aliveCell="1".to_string();
let mut deadCell=" ".to_string();
;
;
let mut initArray=vec![deadCell.to_owned()];
let mut i=0;
while i.to_owned()!=automataLength.to_owned().to_owned()-&2{;
Vec::push(&mut initArray,deadCell.to_owned());
i=i.to_owned().to_owned()+&1;
};
Vec::push(&mut initArray,aliveCell.to_owned());
Vec::push(&mut initArray,deadCell.to_owned());
;
let mut x=0;
print(initArray.get(0).unwrap().to_owned().to_owned()+&"\n".to_string());
while x.to_owned()!=automataLength.to_owned().to_owned()-&1{;
print(initArray.get(x.to_owned()).unwrap().to_owned());
x=x.to_owned().to_owned()+&1;
};
print("\n".to_string());
;
;
i=0;
while i.to_owned()!=automataLength.to_owned().to_owned()-&2{;
let mut newArray=vec![deadCell.to_owned()];
;
let mut pos=0;
while pos.to_owned()!=automataLength.to_owned().to_owned()-&1{;
let mut analyze=initArray.get(pos.to_owned()).unwrap().to_owned().to_owned()+&initArray.get(pos.to_owned().to_owned()+&1).unwrap().to_owned().to_owned()+&initArray.get(pos.to_owned().to_owned()+&2).unwrap().to_owned();
if analyze.to_owned()==deadCell.to_owned().to_owned()+&deadCell.to_owned().to_owned()+&deadCell.to_owned(){;
Vec::push(&mut newArray,deadCell.to_owned());
}else if analyze.to_owned()==aliveCell.to_owned().to_owned()+&deadCell.to_owned().to_owned()+&deadCell.to_owned(){;
Vec::push(&mut newArray,deadCell.to_owned());
}else if analyze.to_owned()==aliveCell.to_owned().to_owned()+&aliveCell.to_owned().to_owned()+&aliveCell.to_owned(){;
Vec::push(&mut newArray,deadCell.to_owned());
}else{;
Vec::push(&mut newArray,aliveCell.to_owned());
};
pos=pos.to_owned().to_owned()+&1;
};
Vec::push(&mut newArray,deadCell.to_owned());
initArray=newArray.to_owned();
let mut x=0;
while x.to_owned()!=automataLength.to_owned(){;
print(initArray.get(x.to_owned()).unwrap().to_owned());
x=x.to_owned().to_owned()+&1;
};
print("\n".to_string());
i=i.to_owned().to_owned()+&1;
};
;
fn print(input:String){std::fs::write("/dev/stdout".to_string(),input.to_owned());
};
}